altair
pandas
streamlit
##
import yaml
import json
from typing import Dict, Any
from flask import Flask, request, jsonify
from jsonschema import validate

class ConfigurationRequestHandler:
    def __init__(self, config_path: str):
        """
        Initialize handler with configuration from YAML file
        
        :param config_path: Path to the YAML configuration file
        """
        with open(config_path, 'r') as file:
            self.config = yaml.safe_load(file)
        
        self.app = Flask(__name__)
        self._setup_routes()
    
    def _validate_request(self, endpoint_config: Dict, request_data: Dict) -> bool:
        """
        Validate incoming request against configured schema
        
        :param endpoint_config: Endpoint configuration
        :param request_data: Incoming request data
        :return: Validation result
        """
        try:
            if 'request_schema' in endpoint_config:
                validate(instance=request_data, schema=endpoint_config['request_schema'])
            return True
        except Exception:
            return False
    
    def _find_matching_endpoint(self, path: str, method: str) -> Dict:
        """
        Find matching endpoint configuration
        
        :param path: Request path
        :param method: HTTP method
        :return: Matching endpoint configuration
        """
        for endpoint in self.config.get('endpoints', []):
            if endpoint['path'] == path and endpoint['method'].upper() == method.upper():
                return endpoint
        return {}
    
    def _setup_routes(self):
        """
        Dynamically create routes from configuration
        """
        for endpoint in self.config.get('endpoints', []):
            self.app.route(
                endpoint['path'], 
                methods=[endpoint['method']]
            )(self._handle_request)
    
    def _handle_request(self):
        """
        Handle incoming requests
        
        :return: JSON response with appropriate status
        """
        # Extract request details
        path = request.path
        method = request.method
        request_data = request.get_json() if request.is_json else {}
        
        # Find matching endpoint
        endpoint_config = self._find_matching_endpoint(path, method)
        
        if not endpoint_config:
            return jsonify({"error": "Not Found"}), 404
        
        # Validate request
        if not self._validate_request(endpoint_config, request_data):
            return jsonify({"error": "Bad Request"}), 400
        
        # Return configured response
        return jsonify(endpoint_config.get('response', {})), 200
    
    def run(self, host: str = '0.0.0.0', port: int = 5000):
        """
        Run the Flask application
        
        :param host: Host address
        :param port: Port number
        """
        self.app.run(host=host, port=port)

# Example configuration
def create_sample_config():
    """
    Create a sample YAML configuration
    """
    config = {
        'endpoints': [
            {
                'path': '/users',
                'method': 'GET',
                'request_schema': {
                    'type': 'object',
                    'properties': {
                        'id': {'type': 'string'}
                    }
                },
                'response': {
                    'name': 'John Doe',
                    'email': 'john@example.com'
                }
            },
            {
                'path': '/users',
                'method': 'POST',
                'request_schema': {
                    'type': 'object',
                    'properties': {
                        'name': {'type': 'string'},
                        'email': {'type': 'string', 'format': 'email'}
                    },
                    'required': ['name', 'email']
                },
                'response': {
                    'status': 'User created successfully'
                }
            }
        ]
    }
    
    with open('config.yaml', 'w') as file:
        yaml.dump(config, file)

# Main execution
if __name__ == '__main__':
    # Create sample configuration
    create_sample_config()
    
    # Initialize and run handler
    handler = ConfigurationRequestHandler('config.yaml')
    handler.run()
