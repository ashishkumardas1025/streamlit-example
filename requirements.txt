altair
pandas
streamlit

from flask import Flask, request, jsonify
import yaml
import random
import datetime
import logging
from typing import Dict, Any

class SimpleOpenAPIServer:
    def __init__(self, yaml_file: str):
        """Initialize the server with a YAML file"""
        self.app = Flask(__name__)
        self.logger = self._setup_logger()
        self.api_spec = self._load_yaml(yaml_file)
        self._create_routes()

    def _setup_logger(self) -> logging.Logger:
        """Set up basic logging"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s'
        )
        return logging.getLogger(__name__)

    def _load_yaml(self, yaml_file: str) -> Dict:
        """Load and parse YAML file"""
        try:
            with open(yaml_file, 'r') as file:
                return yaml.safe_load(file)
        except Exception as e:
            self.logger.error(f"Failed to load YAML file: {e}")
            raise

    def _generate_mock_data(self, schema: Dict) -> Any:
        """Generate mock data based on schema type"""
        if not schema:
            return None

        schema_type = schema.get('type', 'object')

        # Handle different types
        type_handlers = {
            'string': self._handle_string,
            'integer': self._handle_integer,
            'number': self._handle_number,
            'boolean': self._handle_boolean,
            'array': self._handle_array,
            'object': self._handle_object
        }

        handler = type_handlers.get(schema_type, lambda x: None)
        return handler(schema)

    def _handle_string(self, schema: Dict) -> str:
        """Handle string type schemas"""
        format_type = schema.get('format', '')
        
        format_handlers = {
            'date-time': lambda: datetime.datetime.now().isoformat(),
            'date': lambda: datetime.date.today().isoformat(),
            'email': lambda: f"user{random.randint(1,100)}@example.com",
            'uri': lambda: f"https://example.com/resource/{random.randint(1,100)}"
        }

        return format_handlers.get(format_type, lambda: f"sample_{random.randint(1,1000)}")()

    def _handle_integer(self, schema: Dict) -> int:
        """Handle integer type schemas"""
        min_val = schema.get('minimum', 1)
        max_val = schema.get('maximum', 100)
        return random.randint(min_val, max_val)

    def _handle_number(self, schema: Dict) -> float:
        """Handle number type schemas"""
        min_val = schema.get('minimum', 0.0)
        max_val = schema.get('maximum', 100.0)
        return round(random.uniform(min_val, max_val), 2)

    def _handle_boolean(self, schema: Dict) -> bool:
        """Handle boolean type schemas"""
        return random.choice([True, False])

    def _handle_array(self, schema: Dict) -> list:
        """Handle array type schemas"""
        items_schema = schema.get('items', {})
        return [self._generate_mock_data(items_schema) for _ in range(2)]  # Generate 2 items

    def _handle_object(self, schema: Dict) -> Dict:
        """Handle object type schemas"""
        properties = schema.get('properties', {})
        return {
            prop_name: self._generate_mock_data(prop_schema)
            for prop_name, prop_schema in properties.items()
        }

    def _create_route_handler(self, path: str, method: str, operation: Dict):
        """Create a handler function for a route"""
        def handler(*args, **kwargs):
            try:
                # Get response schema
                response_schema = (
                    operation.get('responses', {})
                    .get('200', {})
                    .get('content', {})
                    .get('application/json', {})
                    .get('schema', {})
                )

                # Generate mock response
                response = self._generate_mock_data(response_schema)
                return jsonify(response), 200

            except Exception as e:
                self.logger.error(f"Error handling request: {e}")
                return jsonify({"error": str(e)}), 500

        return handler

    def _create_routes(self):
        """Create Flask routes from YAML specification"""
        paths = self.api_spec.get('paths', {})

        for path, methods in paths.items():
            # Convert path parameters from {param} to <param>
            flask_path = path.replace('{', '<').replace('}', '>')

            for method, operation in methods.items():
                if method.lower() not in ['get', 'post', 'put', 'delete', 'patch']:
                    continue

                handler = self._create_route_handler(path, method, operation)
                self.app.route(flask_path, methods=[method.upper()])(handler)
                self.logger.info(f"Created route: {method.upper()} {path}")

    def run(self, host: str = 'localhost', port: int = 5000):
        """Run the Flask server"""
        self.logger.info(f"Starting server on {host}:{port}")
        self.app.run(host=host, port=port, debug=True)

# Example usage
def start_server(yaml_file: str, port: int = 5000):
    """Start the API server with the given YAML file"""
    server = SimpleOpenAPIServer(yaml_file)
    server.run(port=port)

if __name__ == '__main__':
    import argparse
    
    parser = argparse.ArgumentParser(description='Start a simple OpenAPI mock server')
    parser.add_argument('yaml_file', help='Path to OpenAPI YAML file')
    parser.add_argument('--port', type=int, default=5000, help='Port to run server on')
    
    args = parser.parse_args()
    start_server(args.yaml_file, args.port)
