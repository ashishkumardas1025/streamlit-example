altair
pandas
streamlit

from flask import Flask, request, jsonify
import yaml
import json
import random
import datetime
from typing import Dict, Any

class SimpleYAMLServer:
    def __init__(self, yaml_file: str):
        """Initialize server with YAML file"""
        self.app = Flask(__name__)
        self.load_yaml(yaml_file)
        self.setup_routes()

    def load_yaml(self, yaml_file: str):
        """Load YAML configuration file"""
        try:
            with open(yaml_file, 'r') as file:
                self.config = yaml.safe_load(file)
            print(f"Successfully loaded {yaml_file}")
        except Exception as e:
            print(f"Error loading YAML: {str(e)}")
            raise

    def generate_mock_data(self, schema: Dict) -> Any:
        """Generate mock data based on schema type"""
        if not schema or not isinstance(schema, dict):
            return None

        schema_type = schema.get('type', 'object')

        if schema_type == 'object':
            return {
                key: self.generate_mock_data(value) 
                for key, value in schema.get('properties', {}).items()
            }

        elif schema_type == 'array':
            items = schema.get('items', {})
            return [self.generate_mock_data(items) for _ in range(2)]  # Generate 2 items

        elif schema_type == 'string':
            if schema.get('format') == 'date-time':
                return datetime.datetime.now().isoformat()
            return "sample_string"

        elif schema_type == 'integer':
            return 123

        elif schema_type == 'boolean':
            return True

        return None

    def setup_routes(self):
        """Set up Flask routes based on YAML paths"""
        
        @self.app.route('/service-product/e-transfer-service/e-transfer-account-alias-registrations', methods=['GET'])
        def get_registrations():
            """Handle GET request"""
            try:
                # Get schema from YAML config
                schema = (self.config.get('paths', {})
                         .get('/service-product/e-transfer-service/e-transfer-account-alias-registrations', {})
                         .get('get', {})
                         .get('responses', {})
                         .get('200', {})
                         .get('content', {})
                         .get('application/json', {})
                         .get('schema', {}))
                
                # Generate mock response
                response = self.generate_mock_data(schema)
                return jsonify(response), 200
            except Exception as e:
                return jsonify({"error": str(e)}), 500

        @self.app.route('/service-product/e-transfer-service/e-transfer-account-alias-registrations', methods=['POST'])
        def create_registration():
            """Handle POST request"""
            try:
                request_data = request.get_json()
                
                # Get response schema from YAML config
                schema = (self.config.get('paths', {})
                         .get('/service-product/e-transfer-service/e-transfer-account-alias-registrations', {})
                         .get('post', {})
                         .get('responses', {})
                         .get('200', {})
                         .get('content', {})
                         .get('application/json', {})
                         .get('schema', {}))
                
                # Generate mock response
                response = self.generate_mock_data(schema)
                return jsonify(response), 201
            except Exception as e:
                return jsonify({"error": str(e)}), 500

        @self.app.route('/service-product/e-transfer-service/e-transfer-account-alias-registrations/<string:alias_id>', methods=['PUT'])
        def update_registration(alias_id):
            """Handle PUT request"""
            try:
                request_data = request.get_json()
                
                # Get response schema from YAML config
                schema = (self.config.get('paths', {})
                         .get('/service-product/e-transfer-service/e-transfer-account-alias-registrations/{alias_id}', {})
                         .get('put', {})
                         .get('responses', {})
                         .get('200', {})
                         .get('content', {})
                         .get('application/json', {})
                         .get('schema', {}))
                
                # Generate mock response
                response = self.generate_mock_data(schema)
                return jsonify(response), 200
            except Exception as e:
                return jsonify({"error": str(e)}), 500

        @self.app.route('/service-product/e-transfer-service/e-transfer-account-alias-registrations/<string:alias_id>', methods=['DELETE'])
        def delete_registration(alias_id):
            """Handle DELETE request"""
            try:
                return jsonify({
                    "message": f"Successfully deleted registration {alias_id}",
                    "success": True
                }), 200
            except Exception as e:
                return jsonify({"error": str(e)}), 500

    def run(self, host='0.0.0.0', port=5000):
        """Run the Flask server"""
        self.app.run(host=host, port=port, debug=True)

# Main execution
if __name__ == '__main__':
    # Create and run server
    server = SimpleYAMLServer('etransferr.yaml')
    server.run()
