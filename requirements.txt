altair
pandas
streamlit

openapi: 3.0.0
info:
  title: Book API
  version: 1.0.0
  description: A simple API to manage books.
servers:
  - url: http://localhost:5000/api

paths:
  /books:
    get:
      summary: Get all books
      responses:
        '200':
          description: List of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      summary: Add a new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Book created

  /books/{id}:
    get:
      summary: Get a book by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
    put:
      summary: Update a book by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Book updated
    delete:
      summary: Delete a book by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Book deleted

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        author:
          type: string

import yaml
from flask import Flask, jsonify, request
from flask_restful import Api, Resource
import os

app = Flask(__name__)
api = Api(app)


def load_openapi_spec(file_path):
    """Load OpenAPI specification from a YAML file."""
    with open(file_path, 'r') as file:
        return yaml.safe_load(file)


def generate_sample_response(schema):
    """
    Generate a sample response based on a schema.
    For simplicity, handle basic types (string, integer, boolean, etc.).
    """
    if schema.get("type") == "object":
        return {key: generate_sample_response(value) for key, value in schema.get("properties", {}).items()}
    elif schema.get("type") == "array":
        return [generate_sample_response(schema.get("items", {}))]
    elif schema.get("type") == "string":
        return "string_example"
    elif schema.get("type") == "integer":
        return 123
    elif schema.get("type") == "boolean":
        return True
    else:
        return None


def create_endpoint(path, methods, responses):
    """
    Create a Flask endpoint dynamically.
    :param path: API path (e.g., /books/{id})
    :param methods: List of HTTP methods (e.g., GET, POST)
    :param responses: Response schema from the OpenAPI spec
    """
    class DynamicResource(Resource):
        def dispatch_request(self, *args, **kwargs):
            # Mimic the response from the first response in the schema
            status_code = list(responses.keys())[0]
            response_schema = responses[status_code].get("content", {}).get("application/json", {}).get("schema", {})
            sample_response = generate_sample_response(response_schema)
            return jsonify(sample_response)

    # Replace path parameters (e.g., {id}) with Flask's syntax (<id>)
    flask_path = path.replace("{", "<").replace("}", ">")
    api.add_resource(DynamicResource, flask_path, methods=methods)


def setup_routes_from_spec(spec):
    """Setup all routes based on the OpenAPI spec."""
    for path, operations in spec.get("paths", {}).items():
        for method, details in operations.items():
            responses = details.get("responses", {})
            create_endpoint(path, [method.upper()], responses)


# Load OpenAPI spec and setup routes
openapi_spec_path = os.getenv("OPENAPI_SPEC_PATH", "openapi.yaml")
openapi_spec = load_openapi_spec(openapi_spec_path)
setup_routes_from_spec(openapi_spec)

if __name__ == "__main__":
    app.run(debug=True)


